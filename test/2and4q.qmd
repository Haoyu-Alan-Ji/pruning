---
title: "My document"
author: "Haoyu Ji-jih20"
format: 
  html:
    self-contained: true
date: today
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(here)
setwd(here::here())
```

```{r pkgs, message = FALSE, warning=FALSE}
library(Matrix)
library(ape)
library(tidyverse); theme_set(theme_bw())
library(waldo)
library(expm)
library(RTMB)
library(numDeriv) ## for testing gradients
library(microbenchmark)
```

```{r seed}
set.seed(427)
```

```{r primate-tree1}
load("../data/primates.rda")
p1 <- primate.tree1
plot(reorder(p1, "pruningwise"))
tiplabels()
nodelabels()

# 2*2 q
q01 <- 1.2
q10 <- 0.5
Q <- matrix(c(-1.2, 1.2,
              0.5, -0.5), nrow = 2, byrow = TRUE)

liks <- matrix(NA, nrow = Ntip(p1) + p1$Nnode, ncol = 2)

ntips <- nrow(primate.discrete2)
liks[1:ntips,] <- 0
inds <- cbind(1:ntips, primate.discrete2[,"trait2"]+1)
liks[inds] <- 1 #第二排性状为1的是trait2=1

# calculate by pruninwise order
p1 <- reorder(p1, "pruningwise")
comp <- numeric(nrow(liks))
anc <- unique(p1$edge[, 1])
for (i in anc) {
  desRows <- which(p1$edge[, 1] == i) #父节点对应的行索引
  desNodes <- p1$edge[desRows, 2] # 父节点对应的子节点
  v <- 1
  for (d in seq_along(desRows)) { #遍历循环中对应这个值的父节点，返回的是索引
    t <- p1$edge.length[desRows[d]] #索引在desRow里面返回对应的行号，得到t
    P <- expm(Q * t)
    v <- v * (P %*% liks[desNodes[d], ])
  }
  comp[i] <- sum(v)
  liks[i, ] <- v / comp[i]
  ## cat(i, liks[i,], "\n")
}

#loglik
TIPS <- 1:Ntip(p1)
root <- Ntip(p1) + 1
root.p <- rep(0.5, 2)
loglik <- sum(log(comp[-TIPS])) + log(sum(root.p * liks[root, ]))

neg_loglik <- -loglik
print(neg_loglik)
```

## with RTMB

```{r 2*2 RTMB}
q22 <- function(pars) {
  fn <- function(pars) {
    ## allow sub-assignment, i.e. assignment to a particular row of a matrix
    ## https://groups.google.com/g/tmb-users/c/HlPqkfcCa1g
    "[<-" <- ADoverload("[<-")
    "c" <- ADoverload("c")
    "diag<-" <- ADoverload("diag<-")
    getAll(pars)
    ## right now, now constraints on the transition matrix (i.e
    ## all elements can be non-zero)
    ## pars <- c(1.2, 0.5)
    Q <- matrix(0, 2, 2)
    non_diag <- (row(Q) != col(Q))
    Q[non_diag] <- trans_rates ## fill in off-diagonals
    diag(Q) <- -1*rowSums(Q)
    
    liks <- matrix(NA, nrow = Ntip(p1) + p1$Nnode, ncol = 2)
    ntips <- nrow(primate.discrete2)
    liks[1:ntips,] <- 0
    inds <- cbind(1:ntips, primate.discrete2[,"trait2"]+1)
    liks[inds] <- 1
    
    p1 <- reorder(p1, "pruningwise")
    comp <- numeric(nrow(liks))
    anc <- unique(p1$edge[, 1])
    for (i in anc) {
      desRows <- which(p1$edge[, 1] == i)
      desNodes <- p1$edge[desRows, 2]
      v <- 1
      for (d in seq_along(desRows)) {
        t <- p1$edge.length[desRows[d]]
        ## need Matrix::expm , then drop() to convert back to a vector
        P <- Matrix::expm(Q * t)
        v <- drop(v * (P %*% liks[desNodes[d], ]))
      }
      comp[i] <- sum(v)
      liks[i, ] <- v / comp[i]
      ## n.b. these numbers won't make sense in AD mode!
    }
    TIPS <- 1:Ntip(p1)
    root <- Ntip(p1) + 1
    root.p <- rep(0.5, 2)
    neg_loglik <- -1*(sum(log(comp[-TIPS])) + log(sum(root.p * liks[root, ])))
    return(neg_loglik)
  }
  
  ff <- MakeADFun(fn, pars, silent = TRUE)
  ff1 <- optim(ff$par, ff$fn, ff$gr, method = "BFGS")
  
  fngradwrap <- function(p) {
    fn(list(trans_rates = p))
  }
  finite_diff = numDeriv::grad(fngradwrap, pars0$trans_rates)
  AD = pp2$ff$gr()
  
  mb1 <- microbenchmark(
    AD = pp2$ff$gr(),
    finite_diff = numDeriv::grad(fngradwrap, pars0$trans_rates)
  )

  result <- list(
  opt_ff = ff1,
  ff = ff,
  loglik = ff1$value,
  par_hat = ff1$par,
  AD = AD,
  finite_diff = finite_diff,
  mb1 = mb1
  )
  
  cat('loglik:\n'); print(ff$fn(ff1$par))
  cat('parameters:\n'); print(ff1$par)
  
  return(result)
}

pars0 <- list(trans_rates = c(0.5, 1.2))
pp2 <- q22(pars0)

#is this three the info we want? seems like very small diff
pp2$mb1
pp2$AD
pp2$finite_diff
```

## bigger transition matrices

```{r}

## put indices in corresponding to allowed transitions
states <- c("(0,0)", "(0,1)", "(1,0)", "(1,1)")
Q_template <- matrix(0, 4, 4,
                     dimnames = list(states, states))
allowed <- matrix(c(2,1,
                    3,1,
                    1,2,
                    4,2,
                    1,3,
                    4,3,
                    3,4,
                    2,4),
                  ncol = 2,
                  byrow = TRUE)
Q_template[allowed] <- 1:8
image(Matrix(Q_template))

trans_rate <- abs(rnorm(8))
Q_cur <- Q_template

## start likelihood calculation here ...
Q_cur[Q_cur!=0] <- trans_rate  ## fill in transition rate values
diag(Q_cur) <- -rowSums(Q_cur) ## set diagonal
## ... now compute the log-likelihood using this Q ...
image(Matrix(Q_cur))
```