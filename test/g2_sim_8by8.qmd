---
title: "My document"
author: "Haoyu Ji-jih20"
format: 
  html:
    self-contained: true
date: today
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(here)
setwd(here::here())
```

```{r pkgs, message = FALSE, warning=FALSE}
library(Matrix)
library(ape)
library(tidyverse); theme_set(theme_bw())
library(waldo)
library(expm)
library(RTMB)
library(numDeriv) ## for testing gradients
library(microbenchmark)
library(corHMM)
```

```{r seed}
set.seed(427)
```

```{r primate-tree1}
source("../R/pruning_funs.R")
load("../data/primates.rda")
```

```{r 4by4_tree1}
m4 <- rtree(100)
g2 <- reorder(m4, "pruningwise")
Q_template8 <- setup_Q_template(2,3)
log_trans_rates <- log(abs(rnorm(24)))
                       
d <- get_multitrait(c(2 ,2, 2), g2)
traits8 <- multi_to_single(d[,-1], c(2, 2, 2))

TMBdata <- list(Q_template = Q_template8,
                       tree = g2, trait_values = traits8)
ff4 <- RTMB::MakeADFun(func = prune_nll,
                      parameters = list(log_trans_rates = log_trans_rates), silent = TRUE)
sim4p1 <- suppressWarnings(
  with(ff4, nlminb(par, fn, gr))
)
```

```{r parallel-refits, cache=TRUE}
 library(parallel)
 cl <- makeCluster(min(10, detectCores()-1))
 tmpfun <- function(i) random_refit(ff4)
 clusterExport(cl, varlist = c("random_refit", "ff4",
							   "TMBdata", "setup_Q"))
 invisible(clusterEvalQ(cl, library(ape)))
 system.time(
   result_frame <- parLapply(cl, 1:500, tmpfun) |>
	 do.call(what=rbind)
 )
```


```{r check-random-fits}
 result_good <- subset(result_frame, convergence == 0)
 dim(result_good)

 result_good$objective |>
   round(3) |>
   table()
```

```{r}
 plot(ecdf(result_good$objective))
```
False convergence: see [here](https://stackoverflow.com/a/40049233/190277)

```{r corHMM, cache = TRUE, eval =FALSE}
system.time(
  cor_sim4U <- corHMM(g2, d, root.p = 'madfitz', rate.cat = 1)
)
```

```{r compare}
print(with(ff4$env, ff4$gr(last.par.best)))
##new <- hmm2prune(cor_sim4U)

## print(c(sim4p1$objective, -cor_sim4U$loglik, new))
```
