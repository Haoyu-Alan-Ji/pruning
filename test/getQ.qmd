---
title: "questions on corHMM' Q-generating method"
author: "Haoyu Ji"
format: 
  html:
    self-contained: true
date: today
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(here)
setwd(here::here())
```

```{r pkgs, message = FALSE, warning=FALSE}
## https://github.com/bbolker/corHMM/blob/bolker_clean/misc/test_RTMB.R
## remotes::install_github("bbolker/corHMM", ref = "bolker_clean")
library(Matrix)
library(ape)
library(tidyverse); theme_set(theme_bw())
library(waldo)
library(expm)
library(RTMB)
library(numDeriv)
library(microbenchmark)
library(devtools)
```

```{r seed}
set.seed(427)
```

```{r funs}
source('../R/Q_template.R')
source('../R/getinfo.R')
```
when ntrait = 3, fitfun(capture corHMM) just provided a 2-trait Q
```{r test1}
out1 <- simfun(ntrait = 3, ntaxa = 20, seed = 2)
o1 <- fitfun(out1)
Q_template(k= 3)
o1$index.mat
```
Now it's ntrait = 4, the same situation, k-1 Q happened
```{r test2}
out2 <- simfun(ntrait = 4, ntaxa = 100, seed = 3)
o2 <- fitfun(out2)
Q_template(k= 4)
o2$index.mat
```

Based on this, when getting the start value in [multistart](https://github.com/Haoyu-Alan-Ji/pruning/blob/main/R/bestfit.R), I have to minus 1 to construct Q, in case let start value p matches the corHMM-generated index matrix's length. (Q <- Q_template(k= ncol(dat$data)-1))